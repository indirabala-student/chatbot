from flask import Flask, render_template, request, jsonify
from openai import OpenAI
import pandas as pd

app = Flask(__name__)

client = OpenAI(
    api_key="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"
)

# Load doctors database
doctors_df = pd.read_csv('doctors.csv')
specialist_df = pd.read_csv('specialists.csv')

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/ask", methods=["POST"])
def ask():
    user_input = request.get_json("message")
    chat_history = user_input.get("history", [])
    user_message = user_input.get("message", "")
    
    # Add user message to chat history
    chat_history.append({"role": "user", "content": user_message})

    # Prepare the system prompt for GPT
    outmessages = [{
        "role": "system",
        "content": """
You are a helpful AI doctor assistant that diagnoses symptoms, assesses severity, and refers users to local doctors.

Instructions:
1. First assess the severity of the condition: mild, moderate, or severe.
2. If mild: suggest only home remedies, OTC medications, Suggest Food Diets and follow-up questions.
3. If moderate or severe:
    - Recommend lab tests (in a separate paragraph).
    - Suggest the type of medical specialist to consult.
    - Generate a short summary script the user can take to the doctor.
4. Ask for Current City. Format the request as:
"What city are you located in so I can check for specialists near you?"

Return severity level as the first line: (Severity: Mild/Moderate/Severe)

Always be clear and concise. If the topic is unrelated to health, say so politely.
"""
    }] + chat_history

    # Call GPT
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=outmessages
    )

    reply = response.choices[0].message
    reply_text = reply.content
    chat_history.append(dict(reply))

    return jsonify({"reply": reply_text, "history": chat_history})

@app.route("/find_doctors", methods=["POST"])
def find_doctors():
    data = request.get_json()
    city = data.get("city")
    specialty = data.get("specialty")
    chat_history = data.get("history", [])
    
    # Normalize specialty (convert to lowercase and handle common variations)
    if specialty:
        specialty = specialty.lower().strip()
        # Handle common specialty variations
        specialty_mapping = {
            "heart": "cardiologist",
            "cardiology": "cardiologist",
            "skin": "dermatologist",
            "dermatology": "dermatologist",
            "brain": "neurologist",
            "neurology": "neurologist",
            "eye": "ophthalmologist",
            "eyes": "ophthalmologist",
            "ophthalmology": "ophthalmologist",
            "bones": "orthopedic",
            "orthopedics": "orthopedic",
            "joint": "orthopedic",
            "stomach": "gastroenterologist",
            "gastroenterology": "gastroenterologist",
            "gi": "gastroenterologist",
            "lungs": "pulmonologist",
            "pulmonology": "pulmonologist",
            "breathing": "pulmonologist",
            "hormones": "endocrinologist",
            "endocrinology": "endocrinologist",
            "urinary": "urologist",
            "urology": "urologist",
            "mental": "psychiatrist",
            "psychiatry": "psychiatrist",
            "psychology": "psychiatrist",
            "general": "general physician"
        }
        
        specialty = specialty_mapping.get(specialty, specialty)
    
    if not city or not specialty:
        return jsonify({
            "doctors": [],
            "message": "Please provide both city and specialty",
            "history": chat_history
        })
    
    # Filter doctors by city and specialty
    filtered_df = doctors_df[
        (doctors_df['city'].str.lower() == city.lower()) & 
        (doctors_df['specialty'].str.lower() == specialty.lower())
    ]
    
    # Sort by rating (highest first)
    filtered_df = filtered_df.sort_values('rating', ascending=False)
    
    # Limit to top 5
    top_doctors = filtered_df.head(5).to_dict('records')
    
    if not top_doctors:
        response_message = f"No {specialty} found in {city}. Please try another specialty or location."
    else:
        response_message = f"Here are the top {specialty} specialists in {city}:"
        for doctor in top_doctors:
            response_message += f"\n- Dr. {doctor['name']}, {doctor['clinic']}, {doctor['address']}, {doctor['phone']}, Rating: {doctor['rating']}"
        
        response_message += "\n\nWould you like to book an appointment with any of these doctors? If so, please provide the doctor's name."
    
    # Add response to chat history
    chat_history.append({"role": "assistant", "content": response_message})
    
    return jsonify({
        "doctors": top_doctors,
        "message": response_message,
        "history": chat_history
    })

if __name__ == "__main__":
    app.run(debug=True)
